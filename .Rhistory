#' @details Requires parallel package.
#'  drv
#'    A character string specifying the database management system driver.
#'  ...
#'    Arguments needed to connect to the database, such as user, password, dbname, host, port, etc.
#'  cancer
#'    For example, "coad".
#'  array
#'    For example, "humanmethylation450" or "illuminahiseq_rnaseqv2".
#'  from.table
#'    FROM postgreSQLtable WHERE ... part of a SELECT statement.
#'  and.table
#'    FROM postgreSQLtable WHERE ... part of a SELECT statement for a second table
#'  to.table
#'    PostgreSQL table where the significant correlations will be written.
#'  stdev.threshold.from
#'    Filters out all rows containing values with lower standard deviation than the specified threshold
#'    (in from.query).
#'  stdev.threshold.and
#'    Filters out all rows containing values with lower standard deviation than the specified threshold
#'    (in and.query).
#'  pval.threshold
#'    Correlations with a p-value higher than this threshold will be considered significant and registered
#'    in to.table.
#'  nthreads
#'    Number of threads this functions will use.
corFromTableToTable <- function (drv, ..., cancer, array, from.table = NULL, from.condition = NULL,
and.table = NULL,
to.table = NULL, stdev.threshold.from = 0,
stdev.threshold.and = 0, pval.threshold = 1, nthreads = 1){
require(parallel)
if (exists("dbConnect") == FALSE){
require(RPostgreSQL)
}
con <- dbConnect(drv, ...)
if (is.null(con)) {
stop("supply a connection")
}
if (is.null(from.table)) {
stop("supply a table to read from")
}
if (is.null(to.table)) {
stop("supply a table to write to")
}
if (!(is.numeric(stdev.threshold.from))){
stop("'stdev.threshold.from' must be numeric")
}
if (!(is.numeric(stdev.threshold.and))){
stop("'stdev.threshold.and' must be numeric")
}
if (!(is.numeric(pval.threshold))){
stop("'pval.threshold' must be numeric")
}
# Prepare and filter dataframes
filter <- function (dataframe, stdev){
system('echo Filtering started $(date)')
startrow <- nrow(dataframe)
df <- na.exclude(dataframe)
noNArow <- nrow(df)
df$sd <- apply(df[,-1], 1, sd, na.rm=TRUE)
df <- subset(df, sd > stdev)
df <- df[,-length(df)]
endrow <- nrow(df)
diffrow <- startrow - endrow
noNA <- startrow - noNArow
cat(paste('\n', diffrow, 'probes filtered out.', noNA, 'probes contained NAs\n'))
system('echo Filtering ended $(date)')
return (df)
}
# Do all probe correlations
correlation <- function (x, y, to.table, pval.threshold){
a <- as.numeric(x[-1])
b <- as.numeric(y[-1])
corr <- cor.test (a, b, method = "spearman")
count <<- count + 1
if (corr$p.value <= pval.threshold) {
x_probe_name <- x[1]
y_probe_name <- y[1]
if (!init){
system('echo Initializing connection with PostgreSQL $(date)')
drv <<- dbDriver("PostgreSQL")
con1 <<- dbConnect(drv, auth)
dbSendQuery(con1, "SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;")
dbSendQuery(con1, 'BEGIN;')
init <<- TRUE
}
# because the pvalue is defined as float(4) in postgres
if  (corr$p.value < 5.60519e-45) corr$p.value <- 0
statement <- paste0("INSERT INTO ", to.table, " VALUES ('",
x_probe_name, "', '", y_probe_name, "', ",
corr$estimate, ",", corr$p.value, ");")
dbSendQuery(con1, statement)
}
if (count >= 100000){
system('echo 100000 counts done $(date)')
dbSendQuery(con1, 'COMMIT;')
dbSendQuery(con1, 'BEGIN;')
count <<- 0
}
}
apply2 <- function (X, Y, DOMAIN, CTION, ...) {
CTION <- match.fun(CTION)
dl <- length(dim(Y))
if (!dl)
stop("dim(Y) must have a positive length")
if (is.object(Y))
Y <- if (dl == 2L)
as.matrix(Y)
else as.array(Y)
d <- dim(Y)
dn <- dimnames(Y)
ds <- seq_len(dl)
if (is.character(DOMAIN)) {
if (is.null(dnn <- names(dn)))
stop("'Y' must have named dimnames")
DOMAIN <- match(DOMAIN, dnn)
if (any(is.na(DOMAIN)))
stop("not all elements of 'DOMAIN' are names of dimensions")
}
s.call <- ds[-DOMAIN]
s.ans <- ds[DOMAIN]
d.call <- d[-DOMAIN]
d.ans <- d[DOMAIN]
dn.call <- dn[-DOMAIN]
dn.ans <- dn[DOMAIN]
d2 <- prod(d.ans)
if (d2 == 0L) {
newY <- array(vector(typeof(Y), 1L), dim = c(prod(d.call),
1L))
ans <- CTION(if (length(d.call) < 2L)
newY[, 1]
else array(X,newY[, 1L], d.call, dn.call), ...)
return(if (is.null(ans)) ans else if (length(d.ans) <
2L) ans[1L][-1L] else array(ans, d.ans, dn.ans))
}
newY <- aperm(Y, c(s.call, s.ans))
dim(newY) <- c(prod(d.call), d2)
ans <- vector("list", d2)
if (length(d.call) < 2L) {
if (length(dn.call))
dimnames(newY) <- c(dn.call, list(NULL))
for (i in 1L:d2) {
tmp <- CTION(X,newY[, i], ...)
if (!is.null(tmp))
ans[[i]] <- tmp
}
}
else for (i in 1L:d2) {
tmp <- CTION(array(X,newY[, i], d.call, dn.call), ...)
if (!is.null(tmp))
ans[[i]] <- tmp
}
ans.list <- is.recursive(ans[[1L]])
l.ans <- length(ans[[1L]])
ans.names <- names(ans[[1L]])
if (!ans.list)
ans.list <- any(unlist(lapply(ans, length)) != l.ans)
if (!ans.list && length(ans.names)) {
all.same <- vapply(ans, function(Y) identical(names(Y),
ans.names), NA)
if (!all(all.same))
ans.names <- NULL
}
len.a <- if (ans.list)
d2
else length(ans <- unlist(ans, recursive = FALSE))
if (length(DOMAIN) == 1L && len.a == d2) {
names(ans) <- if (length(dn.ans[[1L]]))
dn.ans[[1L]]
return(ans)
}
if (len.a == d2)
return(array(ans, d.ans, dn.ans))
if (len.a && len.a%%d2 == 0L) {
if (is.null(dn.ans))
dn.ans <- vector(mode = "list", length(d.ans))
dn.ans <- c(list(ans.names), dn.ans)
return(array(ans, c(len.a%/%d2, d.ans), if (!all(vapply(dn.ans,
is.null, NA))) dn.ans))
}
return(ans)
}
apply2half <- function (X, Y, DOMAIN, CTION, ...) {
rowmatch <- match(X[1], Y[,1])
if (rowmatch < nrow (Y)){
Y <- Y[((1L+rowmatch):nrow(Y)),]
CTION <- match.fun(CTION)
dl <- length(dim(Y))
if (!dl)
stop("dim(Y) must have a positive length")
if (is.object(Y))
Y <- if (dl == 2L)
as.matrix(Y)
else as.array(Y)
d <- dim(Y)
dn <- dimnames(Y)
ds <- seq_len(dl)
if (is.character(DOMAIN)) {
if (is.null(dnn <- names(dn)))
stop("'Y' must have named dimnames")
DOMAIN <- match(DOMAIN, dnn)
if (any(is.na(DOMAIN)))
stop("not all elements of 'DOMAIN' are names of dimensions")
}
s.call <- ds[-DOMAIN]
s.ans <- ds[DOMAIN]
d.call <- d[-DOMAIN]
d.ans <- d[DOMAIN]
dn.call <- dn[-DOMAIN]
dn.ans <- dn[DOMAIN]
d2 <- prod(d.ans)
if (d2 == 0L) {
newY <- array(vector(typeof(Y), 1L), dim = c(prod(d.call),
1L))
ans <- CTION(if (length(d.call) < 2L)
newY[, 1]
else array(X,newY[, 1L], d.call, dn.call), ...)
return(if (is.null(ans)) ans else if (length(d.ans) <
2L) ans[1L][-1L] else array(ans, d.ans, dn.ans))
}
newY <- aperm(Y, c(s.call, s.ans))
dim(newY) <- c(prod(d.call), d2)
ans <- vector("list", d2)
if (length(d.call) < 2L) {
if (length(dn.call))
dimnames(newY) <- c(dn.call, list(NULL))
for (i in 1L:d2) {
tmp <- CTION(X,newY[, i], ...)
if (!is.null(tmp))
ans[[i]] <- tmp
}
}
else for (i in 1L:d2) {
tmp <- CTION(array(X,newY[, i], d.call, dn.call), ...)
if (!is.null(tmp))
ans[[i]] <- tmp
}
ans.list <- is.recursive(ans[[1L]])
l.ans <- length(ans[[1L]])
ans.names <- names(ans[[1L]])
if (!ans.list)
ans.list <- any(unlist(lapply(ans, length)) != l.ans)
if (!ans.list && length(ans.names)) {
all.same <- vapply(ans, function(Y) identical(names(Y),
ans.names), NA)
if (!all(all.same))
ans.names <- NULL
}
len.a <- if (ans.list)
d2
else length(ans <- unlist(ans, recursive = FALSE))
if (length(DOMAIN) == 1L && len.a == d2) {
names(ans) <- if (length(dn.ans[[1L]]))
dn.ans[[1L]]
return(ans)
}
if (len.a == d2)
return(array(ans, d.ans, dn.ans))
if (len.a && len.a%%d2 == 0L) {
if (is.null(dn.ans))
dn.ans <- vector(mode = "list", length(d.ans))
dn.ans <- c(list(ans.names), dn.ans)
return(array(ans, c(len.a%/%d2, d.ans), if (!all(vapply(dn.ans,
is.null, NA))) dn.ans))
}
return(ans)
}
}
# Get dataframes from the database
cat('\nGetting data from database ')
system('date')
# this fetches the sample names
# x_rs <- dbGetQuery(con,
#                    "SELECT 'SELECT ' || array_to_string(ARRAY(SELECT 'o' || '.' || c.column_name
#                     FROM information_schema.columns AS c
#                     WHERE c.table_name = 'humanmethylation450'
#                       AND c.table_schema = 'coad'
#                       AND c.column_name ~ '^tcga_'
#                     ), ',') || ' FROM coad.humanmethylation450 AS o, coad.humanmethylation450_probeinfo
#                     ' As sqlstmt;")
#function getQuery(con, table, schema, regexpr){
#a <- dbGetQuery(con,
#                    "SELECT 'SELECT ' || array_to_string(ARRAY(SELECT 'o' || '.' || c.column_name
#                     FROM information_schema.columns AS c
#                     WHERE c.table_name = 'humanmethylation450'
#                       AND c.table_schema = 'coad'
#                       AND c.column_name ~ '^tcga_'
#                     ), ',') || ' FROM coad.humanmethylation450 AS o, coad.humanmethylation450_probeinfo
#                     ' As sqlstmt;")
#a[1,1]
#}
init(cancer, array)
samples <- read.table(paste0(readPath, "/", cancerName, "_sampleinfo_", arrayName, "_to_SQL.txt"),
sep = "\t", header = TRUE)
code <- ("SELECT humanmethylation450.probe, ")
for (i in 1:(length(colnames(samples))-1)){
expression <- paste0(colnames(samples)[i], ", ", collapse = NULL)
code <- paste0(code, expression)
}
expression <- paste0(colnames(samples)[length(colnames(samples))], " ", collapse = NULL)
code <- paste0(code, expression)
code <- paste0(code, "FROM ", from.table, ", ", from.table, "_probeinfo")
if (!is.null(from.condition)) {
code <- paste0(code, " WHERE ", from.condition)
}
code <- paste0(code, ";")
# FROM coad.humanmethylation450, coad.humanmethylation450_probeinfo WHERE chromosome = '22';
x_rs <-  dbGetQuery(con, code)
if (!is.null(and.table)) {
y_rs <- dbGetQuery(con, and.query)
}
system('echo Finished getting data from database $(date)')
cat('\nStarting dataset filtering ')
system('date')
x_rs <- filter(x_rs, stdev.threshold.from)
if (!is.null(and.table)) {
y_rs <- filter(y_rs, stdev.threshold.and)
}
system('echo Making clusters $(date)')
cluster <- makeCluster(nthreads)
#clusterExport(cluster, "connect")
clusterEvalQ(cluster, library(RPostgreSQL))
clusterEvalQ(cluster, init <- FALSE)
clusterEvalQ(cluster, count <- 0)
auth<<-list(...)
clusterExport(cluster, "auth")
system('echo Starting parallel apply $(date)')
if (!is.null(and.table)) {
parApply(cl = cluster, X = x_rs, MARGIN = 1, FUN = apply2, Y = y_rs, DOMAIN = 1,
CTION = correlation, to.table = to.table, pval.threshold = pval.threshold)
clusterEvalQ(cluster, dbSendQuery(con1, "COMMIT;"))
stopCluster(cl = cluster)
} else {
parApply(cl = cluster, X = x_rs, MARGIN = 1, FUN = apply2half, Y = x_rs, DOMAIN = 1,
CTION = correlation, to.table = to.table, pval.threshold = pval.threshold)
clusterEvalQ(cluster, dbSendQuery(con1, "COMMIT;"))
stopCluster(cl = cluster)
}
lapply(dbListResults(con), dbClearResult)
dbDisconnect(con)
return (TRUE)
}
readPath <- "~/"
writePath <- "~/"
## Collect arguments
args <- commandArgs(TRUE)
## Default setting when no arguments passed
if(length(args) < 2) {
args <- c("--help")
} else {
## Evaluate arguments
for (a in 2:length(args)){
eval(parse(text = args[a]))
}
}
## Help section
if("--help" %in% args) {
cat("
TCGA Parser help page
All arguments will be evaluated as is, in the specified order:
The arguments can be used to define variables and call functions.
For further information about functions and variables see the TCGA Parser documentation.
readPath and writePath are \"~/\" by default.
Examples:
Establishes the path from which files are read.
\"readPath <- \\\"$PATH\\\"\"
Establishes the path where files will be written as the readPath.
\"writePath <- readPath\"
Downloads all the colon adenocarcinoma Illumina Infinium Human DNA Methylation 450 arrays data
from the TCGA.
\"download(\\\"coad\\\", \\\"humanmethylation450\\\")\"
--help      - Display this help page
\n")
}
if (exists("dbConnect") == FALSE){
require(RPostgreSQL)
}
dbhost = "locke"
drv <- dbDriver("PostgreSQL")
dbname <-"meth_correlations"
dbuser <- "fchen"
dbpass <- "UNpasswordMAS"
dbport <- 5432
con <- dbConnect(drv, ...)
dbConnect(drv, host=dbhost, port=dbport, dbname=dbname, user=dbuser, password=dbpass
con <- dbConnect(drv, host=dbhost, port=dbport, dbname=dbname, user=dbuser, password=dbpass)
from.table = "coad.humanmethylation450"
pkquery <- paste0("SELECT
pg_attribute.attname,
format_type(pg_attribute.atttypid, pg_attribute.atttypmod)
FROM pg_index, pg_class, pg_attribute
WHERE
pg_class.oid = '", from.table, "'::regclass AND
indrelid = pg_class.oid AND
pg_attribute.attrelid = pg_class.oid AND
pg_attribute.attnum = any(pg_index.indkey)
AND indisprimary")
pkquery <- paste0("SELECT pg_attribute.attname, format_type(pg_attribute.atttypid, pg_attribute.atttypmod) ",
"FROM pg_index, pg_class, pg_attribute ",
"WHERE pg_class.oid = '", from.table, "'::regclass ",
"AND indrelid = pg_class.oid ",
"AND pg_attribute.attrelid = pg_class.oid ",
"AND pg_attribute.attnum = any(pg_index.indkey) ",
"AND indisprimary")
pkquery
pk <- dbGetQuery(con, pkquery)
pk
pk[1,1]
pkquery <- paste0("SELECT pg_attribute.attname ",
"FROM pg_index, pg_class, pg_attribute ",
"WHERE pg_class.oid = '", from.table, "'::regclass ",
"AND indrelid = pg_class.oid ",
"AND pg_attribute.attrelid = pg_class.oid ",
"AND pg_attribute.attnum = any(pg_index.indkey) ",
"AND indisprimary")
pk <- dbGetQuery(con, pkquery)
pk
echo(pk)
print(pk)
code <- paste0("SELECT ", from.table, ".", pk,", ")
code
for (i in 1:(length(colnames(samples))-1)){
expression <- paste0(colnames(samples)[i], ", ", collapse = NULL)
code <- paste0(code, expression)
}
expression <- paste0(colnames(samples)[length(colnames(samples))], " ", collapse = NULL)
code <- paste0(code, expression)
samples <- read.table(paste0(readPath, "/", cancerName, "_sampleinfo_", arrayName, "_to_SQL.txt"),
sep = "\t", header = TRUE)
init("coad", "humanmethylation450")
samples <- read.table(paste0(readPath, "/", cancerName, "_sampleinfo_", arrayName, "_to_SQL.txt"),
sep = "\t", header = TRUE)
code <- paste0("SELECT ", from.table, ".", pk,", ")
for (i in 1:(length(colnames(samples))-1)){
expression <- paste0(colnames(samples)[i], ", ", collapse = NULL)
code <- paste0(code, expression)
}
expression <- paste0(colnames(samples)[length(colnames(samples))], " ", collapse = NULL)
code <- paste0(code, expression)
code <- paste0(code, "FROM ", from.table, ", ", from.table, "_probeinfo")
if (!is.null(from.condition)) {
code <- paste0(code, " WHERE ", from.condition)
}
code <- paste0(code, ";")
code
squery <- paste0("SELECT 'SELECT ' || array_to_string(ARRAY(SELECT 'o' || '.' || c.column_name ",
"FROM information_schema.columns AS c ",
"WHERE c.table_name = '", arrayName, "' ",
"AND c.table_schema = '", cancerName, "' ",
"AND c.column_name ~ '^tcga_'), ',') || ' ",
"FROM coad.humanmethylation450 AS o, coad.humanmethylation450_probeinfo';")
squery
samples <- dbGetQuery(con, squery)
samples
squery <- paste0("SELECT array_to_string(ARRAY(SELECT c.column_name ",
"FROM information_schema.columns AS c ",
"WHERE c.table_name = '", arrayName, "' ",
"AND c.table_schema = '", cancerName, "' ",
"AND c.column_name ~ '^tcga_'), ',') || ';")
samples <- dbGetQuery(con, squery)
squery <- paste0("SELECT array_to_string(ARRAY(SELECT c.column_name ",
"FROM information_schema.columns AS c ",
"WHERE c.table_name = '", arrayName, "' ",
"AND c.table_schema = '", cancerName, "' ",
"AND c.column_name ~ '^tcga_'), ',')';")
samples <- dbGetQuery(con, squery)
squery <- paste0("SELECT array_to_string(ARRAY(SELECT c.column_name ",
"FROM information_schema.columns AS c ",
"WHERE c.table_name = '", arrayName, "' ",
"AND c.table_schema = '", cancerName, "' ",
"AND c.column_name ~ '^tcga_'), ',');")
samples <- dbGetQuery(con, squery)
squery <- paste0("SELECT array_to_string(ARRAY(SELECT 'o' || '.' || c.column_name ",
"FROM information_schema.columns AS c ",
"WHERE c.table_name = '", arrayName, "' ",
"AND c.table_schema = '", cancerName, "' ",
"AND c.column_name ~ '^tcga_'), ',');")
samples <- dbGetQuery(con, squery)
View(samples)
samples
squery <- paste0("SELECT array_to_string(ARRAY(SELECT column_name ",
"FROM information_schema.columns ",
"WHERE table_name = '", arrayName, "' ",
"AND table_schema = '", cancerName, "' ",
"AND column_name ~ '^tcga_'), ',');")
samples <- dbGetQuery(con, squery)
squery <- paste0("SELECT array_to_string(ARRAY(SELECT 'o' || '.' || column_name ",
"FROM information_schema.columns ",
"WHERE table_name = '", arrayName, "' ",
"AND table_schema = '", cancerName, "' ",
"AND column_name ~ '^tcga_'), ',');")
samples <- dbGetQuery(con, squery)
samples
squery <- paste0("SELECT array_to_string(ARRAY(SELECT ' ' || column_name ",
"FROM information_schema.columns ",
"WHERE table_name = '", arrayName, "' ",
"AND table_schema = '", cancerName, "' ",
"AND column_name ~ '^tcga_'), ',');")
samples <- dbGetQuery(con, squery)
samples
code
code <- paste0("SELECT ", arrayName, ".", pk,", ")
code
code <- paste0(code, samples)
code
View(pk)
init("asdf","fdsa")
setwd("~/fchen")
dataframe <- read.table("coad_dataframe_jhu-usc.edu_COAD.HumanMethylation450.Level_3.8.6.0.txt")
dataframe <- read.table("coad_dataframe_jhu-usc.edu_COAD.HumanMethylation450.Level_3.8.6.0.txt", header = TRUE, sep = "\t")
filter(dataframe, 0.05)
df <- filter(dataframe, 0.05)
